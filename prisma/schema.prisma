// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActionType {
  Call
  Brief
  Meet
  Email
  Task
}

enum UserRole {
  USER
  ADMIN
  SALES_MANAGER // руководитель продаж
  SALES_REP // продавец
}

enum StageDeal {
  NEW //новая
  ACCESS // выход на ЛПР
  APPOINTMENT // презентация продукта
  DIAGNOSTICS // диагностика
  INVOICE // счет
  PAYMENTAGREEMENT // соглашение о оплате
  DEFERREDPAYMENT // задержка оплаты
  PAYMENT // оплата
  REFUSAL // отказ
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  bloked        Boolean   @default(false)
  settings      Settings?
  accounts      Account[]
  companies     Company[]
  notes         Notes[]
}

// =============== AUTORISATION MODELS ====================
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// =============== SETTINGS MODELS ====================

model Settings {
  id             String  @id @default(cuid())
  user           User?   @relation(fields: [userId], references: [id])
  userId         String? @unique
  aiAssistent    Boolean @default(false)
  telegramChatId String?

  @@map("settings")
}

// =============== CRM MODELS ====================
model Company {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  name        String    @db.VarChar(255)
  TIN         String?
  dateRegistr String?
  address     String?
  owner       String?
  mainOKVED   String?
  comment     String?
  deals       Deal[]
  contacts    Contact[]
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])

  @@map("company")
}

model Contact {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  phone     String
  name      String?
  mail      String?
  comment   String?
  confirmed Boolean  @default(false)
  companyId String?
  notes     Notes[]
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("contact")
}

model Notes {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  text      String
  contactId String
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@map("notes")
}

model Deal {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  name          String
  contractPrice Int?
  cases         Case[]
  summaries     Summary[]
  companyId     String?
  company       Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  stage         StageDeal? @default(NEW)

  @@map("deal")
}

model Case {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  type        ActionType @default(Call)
  comment     String?
  date        DateTime?
  responsible String?
  finished    Boolean    @default(false)
  dealId      String?
  deals       Deal?      @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("case")
}

model Summary {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  comment   String?
  dealId    String?
  deals     Deal?    @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("summary")
}
